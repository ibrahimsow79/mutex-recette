digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] aws_eip.bastion_public_ip" [label = "aws_eip.bastion_public_ip", shape = "box"]
		"[root] aws_key_pair.default" [label = "aws_key_pair.default", shape = "box"]
		"[root] data.aws_availability_zones.available" [label = "data.aws_availability_zones.available", shape = "box"]
		"[root] data.aws_iam_role.iam-read-s3" [label = "data.aws_iam_role.iam-read-s3", shape = "box"]
		"[root] module.backend1.aws_instance.backend" [label = "module.backend1.aws_instance.backend", shape = "box"]
		"[root] module.bastion.aws_instance.bastion" [label = "module.bastion.aws_instance.bastion", shape = "box"]
		"[root] module.bastion.module.ami.data.aws_ami.ubuntu" [label = "module.bastion.module.ami.data.aws_ami.ubuntu", shape = "box"]
		"[root] module.ci.aws_instance.backend" [label = "module.ci.aws_instance.backend", shape = "box"]
		"[root] module.database.aws_instance.database" [label = "module.database.aws_instance.database", shape = "box"]
		"[root] module.gateway.aws_instance.backend" [label = "module.gateway.aws_instance.backend", shape = "box"]
		"[root] module.gitlab.aws_instance.backend" [label = "module.gitlab.aws_instance.backend", shape = "box"]
		"[root] module.sso.aws_instance.backend" [label = "module.sso.aws_instance.backend", shape = "box"]
		"[root] module.vpc.aws_eip.nat-gateway-api" [label = "module.vpc.aws_eip.nat-gateway-api", shape = "box"]
		"[root] module.vpc.aws_internet_gateway.gw" [label = "module.vpc.aws_internet_gateway.gw", shape = "box"]
		"[root] module.vpc.aws_nat_gateway.nat-gateway" [label = "module.vpc.aws_nat_gateway.nat-gateway", shape = "box"]
		"[root] module.vpc.aws_route_table.private-subnet-rt" [label = "module.vpc.aws_route_table.private-subnet-rt", shape = "box"]
		"[root] module.vpc.aws_route_table.web-public-rt" [label = "module.vpc.aws_route_table.web-public-rt", shape = "box"]
		"[root] module.vpc.aws_route_table_association.ci-subnet-rt" [label = "module.vpc.aws_route_table_association.ci-subnet-rt", shape = "box"]
		"[root] module.vpc.aws_route_table_association.datastore-subnet-rt" [label = "module.vpc.aws_route_table_association.datastore-subnet-rt", shape = "box"]
		"[root] module.vpc.aws_route_table_association.nsi-subnet-rt" [label = "module.vpc.aws_route_table_association.nsi-subnet-rt", shape = "box"]
		"[root] module.vpc.aws_route_table_association.private-subnet-rt" [label = "module.vpc.aws_route_table_association.private-subnet-rt", shape = "box"]
		"[root] module.vpc.aws_route_table_association.web-public-rt" [label = "module.vpc.aws_route_table_association.web-public-rt", shape = "box"]
		"[root] module.vpc.aws_security_group.sg_api" [label = "module.vpc.aws_security_group.sg_api", shape = "box"]
		"[root] module.vpc.aws_security_group.sg_bastion" [label = "module.vpc.aws_security_group.sg_bastion", shape = "box"]
		"[root] module.vpc.aws_security_group.sg_ci" [label = "module.vpc.aws_security_group.sg_ci", shape = "box"]
		"[root] module.vpc.aws_security_group.sg_datastore" [label = "module.vpc.aws_security_group.sg_datastore", shape = "box"]
		"[root] module.vpc.aws_security_group.sg_nsi" [label = "module.vpc.aws_security_group.sg_nsi", shape = "box"]
		"[root] module.vpc.aws_subnet.api-private-subnet" [label = "module.vpc.aws_subnet.api-private-subnet", shape = "box"]
		"[root] module.vpc.aws_subnet.bastion-public-subnet" [label = "module.vpc.aws_subnet.bastion-public-subnet", shape = "box"]
		"[root] module.vpc.aws_subnet.ci-private-subnet" [label = "module.vpc.aws_subnet.ci-private-subnet", shape = "box"]
		"[root] module.vpc.aws_subnet.datastore-private-subnet" [label = "module.vpc.aws_subnet.datastore-private-subnet", shape = "box"]
		"[root] module.vpc.aws_subnet.nsi-private-subnet" [label = "module.vpc.aws_subnet.nsi-private-subnet", shape = "box"]
		"[root] module.vpc.aws_vpc.default" [label = "module.vpc.aws_vpc.default", shape = "box"]
		"[root] provider.aws" [label = "provider.aws", shape = "diamond"]
		"[root] aws_eip.bastion_public_ip" -> "[root] module.bastion.output.bastion_id"
		"[root] aws_eip.bastion_public_ip" -> "[root] var.env"
		"[root] aws_key_pair.default" -> "[root] provider.aws"
		"[root] aws_key_pair.default" -> "[root] var.key_path"
		"[root] data.aws_availability_zones.available" -> "[root] provider.aws"
		"[root] data.aws_iam_role.iam-read-s3" -> "[root] provider.aws"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] data.aws_availability_zones.available"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] data.aws_iam_role.iam-read-s3"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.bastion.output.bastion_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ci.output.backend_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.gateway.output.backend_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.gitlab.output.backend_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.sso.output.backend_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.aws_route_table_association.ci-subnet-rt"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.aws_route_table_association.datastore-subnet-rt"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.aws_route_table_association.nsi-subnet-rt"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.aws_route_table_association.private-subnet-rt"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.aws_route_table_association.web-public-rt"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.output.sg_nsi"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.output.subnet_nsi"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.backend1_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.bastion_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.database_ip"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] var.private_ip_backend2"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] var.windows_key_path"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.ami_id"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.delete_on_terminaison"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.ebs_size"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.env"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.instance_type"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.key_pair"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.name"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.private_ip"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.private_subnet_id"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.script"
		"[root] module.backend1.aws_instance.backend" -> "[root] module.backend1.var.sg_api_id"
		"[root] module.backend1.output.backend_ip" -> "[root] module.backend1.aws_instance.backend"
		"[root] module.backend1.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.backend1.var.private_ip" -> "[root] var.private_ip_backend1"
		"[root] module.backend1.var.private_subnet_id" -> "[root] module.vpc.output.private_subnet_id"
		"[root] module.backend1.var.sg_api_id" -> "[root] module.vpc.output.sg_api"
		"[root] module.bastion.aws_instance.bastion" -> "[root] module.bastion.module.ami.output.ami_id"
		"[root] module.bastion.aws_instance.bastion" -> "[root] module.bastion.var.env"
		"[root] module.bastion.aws_instance.bastion" -> "[root] module.bastion.var.instance_type"
		"[root] module.bastion.aws_instance.bastion" -> "[root] module.bastion.var.key_pair"
		"[root] module.bastion.aws_instance.bastion" -> "[root] module.bastion.var.public_subnet_id"
		"[root] module.bastion.aws_instance.bastion" -> "[root] module.bastion.var.sg_bastion_id"
		"[root] module.bastion.module.ami.data.aws_ami.ubuntu" -> "[root] module.bastion.module.ami.var.instance_name"
		"[root] module.bastion.module.ami.data.aws_ami.ubuntu" -> "[root] provider.aws"
		"[root] module.bastion.module.ami.output.ami_id" -> "[root] module.bastion.module.ami.data.aws_ami.ubuntu"
		"[root] module.bastion.output.bastion_id" -> "[root] module.bastion.aws_instance.bastion"
		"[root] module.bastion.output.bastion_ip" -> "[root] module.bastion.aws_instance.bastion"
		"[root] module.bastion.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.bastion.var.public_subnet_id" -> "[root] module.vpc.output.public_subnet_id"
		"[root] module.bastion.var.sg_bastion_id" -> "[root] module.vpc.output.sg_bastion_id"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.ami_id"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.delete_on_terminaison"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.ebs_size"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.env"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.instance_type"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.key_pair"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.name"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.private_ip"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.private_subnet_id"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.script"
		"[root] module.ci.aws_instance.backend" -> "[root] module.ci.var.sg_api_id"
		"[root] module.ci.output.backend_ip" -> "[root] module.ci.aws_instance.backend"
		"[root] module.ci.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.ci.var.private_ip" -> "[root] var.private_ip_ci"
		"[root] module.ci.var.private_subnet_id" -> "[root] module.vpc.output.subnet_ci"
		"[root] module.ci.var.sg_api_id" -> "[root] module.vpc.output.sg_ci"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.ami_id"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.ebs_size"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.env"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.instance_type"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.key_pair"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.name"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.private_ip"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.private_subnet_id"
		"[root] module.database.aws_instance.database" -> "[root] module.database.var.sg_sgbd_id"
		"[root] module.database.output.database_ip" -> "[root] module.database.aws_instance.database"
		"[root] module.database.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.database.var.private_ip" -> "[root] var.private_ip_database"
		"[root] module.database.var.private_subnet_id" -> "[root] module.vpc.output.subnet_datastore"
		"[root] module.database.var.sg_sgbd_id" -> "[root] module.vpc.output.sg_datastore"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.ami_id"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.delete_on_terminaison"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.ebs_size"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.env"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.instance_type"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.key_pair"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.name"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.private_ip"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.private_subnet_id"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.script"
		"[root] module.gateway.aws_instance.backend" -> "[root] module.gateway.var.sg_api_id"
		"[root] module.gateway.output.backend_ip" -> "[root] module.gateway.aws_instance.backend"
		"[root] module.gateway.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.gateway.var.private_ip" -> "[root] var.private_ip_gateway"
		"[root] module.gateway.var.private_subnet_id" -> "[root] module.vpc.output.private_subnet_id"
		"[root] module.gateway.var.sg_api_id" -> "[root] module.vpc.output.sg_api"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.ami_id"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.delete_on_terminaison"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.ebs_size"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.env"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.instance_type"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.key_pair"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.name"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.private_ip"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.private_subnet_id"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.script"
		"[root] module.gitlab.aws_instance.backend" -> "[root] module.gitlab.var.sg_api_id"
		"[root] module.gitlab.output.backend_ip" -> "[root] module.gitlab.aws_instance.backend"
		"[root] module.gitlab.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.gitlab.var.private_ip" -> "[root] var.private_ip_gitlab"
		"[root] module.gitlab.var.private_subnet_id" -> "[root] module.vpc.output.subnet_ci"
		"[root] module.gitlab.var.sg_api_id" -> "[root] module.vpc.output.sg_ci"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.ami_id"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.delete_on_terminaison"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.ebs_size"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.env"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.instance_type"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.key_pair"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.name"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.private_ip"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.private_subnet_id"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.script"
		"[root] module.sso.aws_instance.backend" -> "[root] module.sso.var.sg_api_id"
		"[root] module.sso.output.backend_ip" -> "[root] module.sso.aws_instance.backend"
		"[root] module.sso.var.key_pair" -> "[root] aws_key_pair.default"
		"[root] module.sso.var.private_ip" -> "[root] var.private_ip_sso"
		"[root] module.sso.var.private_subnet_id" -> "[root] module.vpc.output.private_subnet_id"
		"[root] module.sso.var.sg_api_id" -> "[root] module.vpc.output.sg_api"
		"[root] module.vpc.aws_eip.nat-gateway-api" -> "[root] module.vpc.var.env"
		"[root] module.vpc.aws_eip.nat-gateway-api" -> "[root] provider.aws"
		"[root] module.vpc.aws_internet_gateway.gw" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_nat_gateway.nat-gateway" -> "[root] module.vpc.aws_eip.nat-gateway-api"
		"[root] module.vpc.aws_nat_gateway.nat-gateway" -> "[root] module.vpc.aws_subnet.bastion-public-subnet"
		"[root] module.vpc.aws_route_table.private-subnet-rt" -> "[root] module.vpc.aws_nat_gateway.nat-gateway"
		"[root] module.vpc.aws_route_table.web-public-rt" -> "[root] module.vpc.aws_internet_gateway.gw"
		"[root] module.vpc.aws_route_table_association.ci-subnet-rt" -> "[root] module.vpc.aws_route_table.private-subnet-rt"
		"[root] module.vpc.aws_route_table_association.ci-subnet-rt" -> "[root] module.vpc.aws_subnet.ci-private-subnet"
		"[root] module.vpc.aws_route_table_association.datastore-subnet-rt" -> "[root] module.vpc.aws_route_table.private-subnet-rt"
		"[root] module.vpc.aws_route_table_association.datastore-subnet-rt" -> "[root] module.vpc.aws_subnet.datastore-private-subnet"
		"[root] module.vpc.aws_route_table_association.nsi-subnet-rt" -> "[root] module.vpc.aws_route_table.private-subnet-rt"
		"[root] module.vpc.aws_route_table_association.nsi-subnet-rt" -> "[root] module.vpc.aws_subnet.nsi-private-subnet"
		"[root] module.vpc.aws_route_table_association.private-subnet-rt" -> "[root] module.vpc.aws_route_table.private-subnet-rt"
		"[root] module.vpc.aws_route_table_association.private-subnet-rt" -> "[root] module.vpc.aws_subnet.api-private-subnet"
		"[root] module.vpc.aws_route_table_association.web-public-rt" -> "[root] module.vpc.aws_route_table.web-public-rt"
		"[root] module.vpc.aws_route_table_association.web-public-rt" -> "[root] module.vpc.aws_subnet.bastion-public-subnet"
		"[root] module.vpc.aws_security_group.sg_api" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_security_group.sg_api" -> "[root] module.vpc.var.ci_subnet_cidr"
		"[root] module.vpc.aws_security_group.sg_api" -> "[root] module.vpc.var.public_subnet_cidr"
		"[root] module.vpc.aws_security_group.sg_bastion" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_security_group.sg_ci" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_security_group.sg_ci" -> "[root] module.vpc.var.public_subnet_cidr"
		"[root] module.vpc.aws_security_group.sg_datastore" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_security_group.sg_datastore" -> "[root] module.vpc.var.private_subnet_cidr"
		"[root] module.vpc.aws_security_group.sg_datastore" -> "[root] module.vpc.var.public_subnet_cidr"
		"[root] module.vpc.aws_security_group.sg_nsi" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_security_group.sg_nsi" -> "[root] module.vpc.var.private_subnet_cidr"
		"[root] module.vpc.aws_security_group.sg_nsi" -> "[root] module.vpc.var.public_subnet_cidr"
		"[root] module.vpc.aws_subnet.api-private-subnet" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_subnet.api-private-subnet" -> "[root] module.vpc.var.aws_az_private"
		"[root] module.vpc.aws_subnet.api-private-subnet" -> "[root] module.vpc.var.private_subnet_cidr"
		"[root] module.vpc.aws_subnet.bastion-public-subnet" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_subnet.bastion-public-subnet" -> "[root] module.vpc.var.aws_az_public"
		"[root] module.vpc.aws_subnet.bastion-public-subnet" -> "[root] module.vpc.var.public_subnet_cidr"
		"[root] module.vpc.aws_subnet.ci-private-subnet" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_subnet.ci-private-subnet" -> "[root] module.vpc.var.aws_az_private"
		"[root] module.vpc.aws_subnet.ci-private-subnet" -> "[root] module.vpc.var.ci_subnet_cidr"
		"[root] module.vpc.aws_subnet.datastore-private-subnet" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_subnet.datastore-private-subnet" -> "[root] module.vpc.var.aws_az_private"
		"[root] module.vpc.aws_subnet.datastore-private-subnet" -> "[root] module.vpc.var.datastore_subnet_cidr"
		"[root] module.vpc.aws_subnet.nsi-private-subnet" -> "[root] module.vpc.aws_vpc.default"
		"[root] module.vpc.aws_subnet.nsi-private-subnet" -> "[root] module.vpc.var.aws_az_private"
		"[root] module.vpc.aws_subnet.nsi-private-subnet" -> "[root] module.vpc.var.nsi_subnet_cidr"
		"[root] module.vpc.aws_vpc.default" -> "[root] module.vpc.var.env"
		"[root] module.vpc.aws_vpc.default" -> "[root] module.vpc.var.vpc_cidr"
		"[root] module.vpc.aws_vpc.default" -> "[root] provider.aws"
		"[root] module.vpc.output.private_subnet_id" -> "[root] module.vpc.aws_subnet.api-private-subnet"
		"[root] module.vpc.output.public_subnet_id" -> "[root] module.vpc.aws_subnet.bastion-public-subnet"
		"[root] module.vpc.output.sg_api" -> "[root] module.vpc.aws_security_group.sg_api"
		"[root] module.vpc.output.sg_bastion_id" -> "[root] module.vpc.aws_security_group.sg_bastion"
		"[root] module.vpc.output.sg_ci" -> "[root] module.vpc.aws_security_group.sg_ci"
		"[root] module.vpc.output.sg_datastore" -> "[root] module.vpc.aws_security_group.sg_datastore"
		"[root] module.vpc.output.sg_nsi" -> "[root] module.vpc.aws_security_group.sg_nsi"
		"[root] module.vpc.output.subnet_ci" -> "[root] module.vpc.aws_subnet.ci-private-subnet"
		"[root] module.vpc.output.subnet_datastore" -> "[root] module.vpc.aws_subnet.datastore-private-subnet"
		"[root] module.vpc.output.subnet_nsi" -> "[root] module.vpc.aws_subnet.nsi-private-subnet"
		"[root] module.vpc.var.aws_az_private" -> "[root] var.aws_az_private"
		"[root] module.vpc.var.aws_az_public" -> "[root] var.aws_az_public"
		"[root] output.backend1_ip" -> "[root] module.backend1.output.backend_ip"
		"[root] output.bastion_ip" -> "[root] aws_eip.bastion_public_ip"
		"[root] output.database_ip" -> "[root] module.database.output.database_ip"
		"[root] provider.aws (close)" -> "[root] aws_eip.bastion_public_ip"
		"[root] provider.aws (close)" -> "[root] data.aws_availability_zones.available"
		"[root] provider.aws (close)" -> "[root] data.aws_iam_role.iam-read-s3"
		"[root] provider.aws (close)" -> "[root] module.backend1.aws_instance.backend"
		"[root] provider.aws (close)" -> "[root] module.ci.aws_instance.backend"
		"[root] provider.aws (close)" -> "[root] module.database.aws_instance.database"
		"[root] provider.aws (close)" -> "[root] module.gateway.aws_instance.backend"
		"[root] provider.aws (close)" -> "[root] module.gitlab.aws_instance.backend"
		"[root] provider.aws (close)" -> "[root] module.sso.aws_instance.backend"
		"[root] provider.aws (close)" -> "[root] module.vpc.aws_route_table_association.ci-subnet-rt"
		"[root] provider.aws (close)" -> "[root] module.vpc.aws_route_table_association.datastore-subnet-rt"
		"[root] provider.aws (close)" -> "[root] module.vpc.aws_route_table_association.nsi-subnet-rt"
		"[root] provider.aws (close)" -> "[root] module.vpc.aws_route_table_association.private-subnet-rt"
		"[root] provider.aws (close)" -> "[root] module.vpc.aws_route_table_association.web-public-rt"
		"[root] provider.aws (close)" -> "[root] module.vpc.aws_security_group.sg_nsi"
		"[root] provider.aws" -> "[root] var.aws_region"
		"[root] provider.aws" -> "[root] var.my_credentials"
		"[root] provider.aws" -> "[root] var.my_profile"
		"[root] root" -> "[root] meta.count-boundary (count boundary fixup)"
		"[root] root" -> "[root] provider.aws (close)"
	}
}

